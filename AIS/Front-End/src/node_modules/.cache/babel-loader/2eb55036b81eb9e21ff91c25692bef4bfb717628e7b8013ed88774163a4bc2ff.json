{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\athar\\\\Desktop\\\\Projects\\\\AIS v2\\\\ais_front_end\\\\src\\\\components\\\\SpeechRecognitionComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styles from './SpeechRecognition.module.css'; // Import CSS module\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechRecognitionComponent = () => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n  const toggleListen = () => {\n    if (isListening) {\n      recognitionRef.current.stop();\n    } else {\n      recognitionRef.current.start();\n    }\n  };\n  const handleSearch = () => {\n    // Implement your search logic here using the transcript state\n    console.log('Search for:', transcript);\n  };\n  useEffect(() => {\n    recognitionRef.current = new window.webkitSpeechRecognition();\n    recognitionRef.current.continuous = true;\n    recognitionRef.current.interimResults = true;\n    recognitionRef.current.onstart = () => {\n      setIsListening(true);\n    };\n    recognitionRef.current.onend = () => {\n      setIsListening(false);\n    };\n    recognitionRef.current.onresult = event => {\n      let interimTranscript = '';\n      let finalTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript + ' ';\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n      setTranscript(finalTranscript + interimTranscript);\n    };\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.speechRecognitionContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: transcript,\n      onChange: () => {},\n      placeholder: \"Speak or type here...\",\n      className: styles.transcriptInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      className: styles.searchButton,\n      children: \"Go\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechRecognitionComponent, \"vnCmTUEDbQBVF/ADb+daLPbEqzg=\");\n_c = SpeechRecognitionComponent;\nexport default SpeechRecognitionComponent;\nvar _c;\n$RefreshReg$(_c, \"SpeechRecognitionComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styles","jsxDEV","_jsxDEV","SpeechRecognitionComponent","_s","transcript","setTranscript","isListening","setIsListening","recognitionRef","toggleListen","current","stop","start","handleSearch","console","log","window","webkitSpeechRecognition","continuous","interimResults","onstart","onend","onresult","event","interimTranscript","finalTranscript","i","resultIndex","results","length","isFinal","className","speechRecognitionContainer","children","type","value","onChange","placeholder","transcriptInput","fileName","_jsxFileName","lineNumber","columnNumber","onClick","searchButton","_c","$RefreshReg$"],"sources":["C:/Users/athar/Desktop/Projects/AIS v2/ais_front_end/src/components/SpeechRecognitionComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styles from './SpeechRecognition.module.css'; // Import CSS module\r\n\r\nconst SpeechRecognitionComponent = () => {\r\n  const [transcript, setTranscript] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const recognitionRef = useRef(null);\r\n\r\n  const toggleListen = () => {\r\n    if (isListening) {\r\n      recognitionRef.current.stop();\r\n    } else {\r\n      recognitionRef.current.start();\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    // Implement your search logic here using the transcript state\r\n    console.log('Search for:', transcript);\r\n  };\r\n\r\n  useEffect(() => {\r\n    recognitionRef.current = new window.webkitSpeechRecognition();\r\n    recognitionRef.current.continuous = true;\r\n    recognitionRef.current.interimResults = true;\r\n\r\n    recognitionRef.current.onstart = () => {\r\n      setIsListening(true);\r\n    };\r\n\r\n    recognitionRef.current.onend = () => {\r\n      setIsListening(false);\r\n    };\r\n\r\n    recognitionRef.current.onresult = event => {\r\n      let interimTranscript = '';\r\n      let finalTranscript = '';\r\n\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        const transcript = event.results[i][0].transcript;\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript += transcript + ' ';\r\n        } else {\r\n          interimTranscript += transcript;\r\n        }\r\n      }\r\n\r\n      setTranscript(finalTranscript + interimTranscript);\r\n    };\r\n\r\n    return () => {\r\n      if (recognitionRef.current) {\r\n        recognitionRef.current.stop();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.speechRecognitionContainer}>\r\n      <input\r\n        type=\"text\"\r\n        value={transcript}\r\n        onChange={() => {}}\r\n        placeholder=\"Speak or type here...\"\r\n        className={styles.transcriptInput}\r\n      />\r\n     \r\n      <button onClick={handleSearch} className={styles.searchButton}>Go</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechRecognitionComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}